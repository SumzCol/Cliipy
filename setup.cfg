[metadata]
name = Cliipy
description = Cliipy is your escalable, mantainable and ready for production pipelines generator. By fl!ipa
author = Juan José Albán, Felipe Moyano, Jose Fernando Licero, Juan David Barreto
author_email = j.alban@sumz.co
license = BSD 3
long_description = file: README.rst
long_description_content_type = text/x-rst; charset=UTF-8
url = https://github.com/sumzcol/cliipy
# Add here related links, for example:
project_urls =
    Documentation = https://cliipy.io/
    Source = https://github.com/sumzcol/cliipy
#    Changelog = https://cliipy.io/en/latest/changelog.html
    Tracker = https://github.com/sumzcol/cliipy/issues
#    Conda-Forge = https://anaconda.org/conda-forge/cliipy
#    Download = https://pypi.org/project/cliipy/#files
#    Twitter = https://twitter.com/cliipy

# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = any

# Add here all kinds of additional classifiers as defined under
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers =
    Development Status :: 1 - Planning
    Programming Language :: Python
    Topic :: Scientific/Engineering :: Information Analysis
    Topic :: Software Development :: Code Generators

[options]
zip_safe = True
packages = find_namespace:
include_package_data = True
package_dir =
    =src

# Require a min/specific Python version (comma-separated conditions)
python_requires >=3.8

# Add here dependencies of your project (line-separated), e.g. requests>=2.2,<3.0.
# Version specifiers like >=2.2,<3.0 avoid problems due to API changes in
# new major versions. This works if the required packages follow Semantic Versioning.
# For more information, check out https://semver.org/.
install_requires =
    importlib-metadata
    python_version<"3.8
    kedro=0.17

[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install cliipy[features]` like:
# features = cliipy; Visualize

# Add here test requirements (semicolon/line-separated)
testing =
    setuptools
    pytest
    pytest-cov

[options.entry_points]
# Add here console scripts like:
# console_scripts =
#     script_name = cliipy.module:function
# For example:
# And any other entry points, for example:
# cliipy.cli =
#     awesome = cliipyext.awesome.extension:AwesomeExtension
console_scripts =
    set_Environment = cliipy.skeleton:environment
    set_Credentials = cliipy.skeleton:credentials
    new = cliipy.skeleton:new
    clone = cliipy.skeleton:clone
    test = cliipy.skeleton:test
    deploy = cliipy.skeleton:deploy
[tool:pytest]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this py.test issue.
addopts =
    --cov cliipy --cov-report term-missing
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests
# Use pytest markers to select/deselect specific tests
# markers =
#     slow: mark tests as slow (deselect with '-m "not slow"')
#     system: mark end-to-end system tests

[bdist_wheel]
# Use this option if your package is pure-python
universal = 1

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no_vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
max_line_length = 88
extend_ignore = E203, W503
# ^  Black-compatible
#    E203 and W503 have edge cases handled by black
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 4.0.1
package = cliipy
extensions =
    pre_commit
    travis
